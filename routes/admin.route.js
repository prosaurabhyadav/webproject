const express = require('express');
const router = express.Router({ strict: true, caseSensitive: true });

const adminController = require('../controllers/admin.controller');
const auth = require('../middlewares/authentication');

router.post('/login', [adminController.adminLogin]);
router.post('/forgotpassword', [adminController.forgotPasword]);
router.post('/changeuser', auth.newUserAuthentication, [adminController.changeUser]);
router.get('/profile', auth.newUserAuthentication, [adminController.profile]);
router.post('/updatepassword', auth.newUserAuthentication, [adminController.updatePasword]);
router.post('/category', auth.newUserAuthentication, [adminController.category]);
router.get('/categorybygender/:gender', auth.newUserAuthentication, [adminController.categoryName]);
router.post('/editcategory/:categoryid', auth.newUserAuthentication, [adminController.editCategory]);
router.post('/subcategory/:categoryid', auth.newUserAuthentication, [adminController.subCategory]);
router.get('/subcategoryname/:categoryid', auth.newUserAuthentication, [adminController.subCategoryName]);
router.get('/subcategorybyid/:subcategoryid', auth.newUserAuthentication, [adminController.subCategoryById]);
router.post('/editsubcategory/:subcategoryid', auth.newUserAuthentication, [adminController.editSubCategory]);
router.post('/deletesubcategory/:subcategoryid', auth.newUserAuthentication, [adminController.deleteSubCategory]);
router.post('/profiledata', auth.newUserAuthentication, [adminController.profileData]);
router.get('/profiledatabygender/:gender', auth.newUserAuthentication, [adminController.profileDataByGender]);
router.post('/editprofiledata/:profiledataid', auth.newUserAuthentication, [adminController.editProfileData]);
router.post('/subcategorydetail', auth.newUserAuthentication, [adminController.subCategoryDetail]);
router.get('/getsubcategorydetail', auth.newUserAuthentication, [adminController.getSubCategoryDetail]);
router.get('/subcategorydetailbyid/:subcategoryid', auth.newUserAuthentication, [adminController.subCategoryDetailById]);
router.post('/editsubcategorydetail/:subcategorydetailid', auth.newUserAuthentication, [adminController.editSubCategoryDetail]);
router.post('/description', auth.newUserAuthentication, [adminController.description]);
router.get('/getdescription/:descriptiontype', auth.newUserAuthentication, [adminController.getDescription]);
router.post('/editdescription/:descriptionid', auth.newUserAuthentication, [adminController.editDescription]);
router.post('/promocode', auth.newUserAuthentication, [adminController.promocode]);
router.get('/promocodelist', auth.newUserAuthentication, [adminController.promocodeList]);
router.post('/editpromocode/:promocodeid', auth.newUserAuthentication, [adminController.editPromocode]);
router.post('/deletepromocode/:promocodeid', auth.newUserAuthentication, [adminController.deletePromocode]);
router.post('/deleteallpromocode', auth.newUserAuthentication, [adminController.deleteAllPromocode]);
router.post('/emailtemplate', auth.newUserAuthentication, [adminController.emailTemplate]);
router.get('/getemailtemplate/:templatename', auth.newUserAuthentication, [adminController.getemailTemplate]);
router.post('/editemailtemplate/:emailtemplateid', auth.newUserAuthentication, [adminController.editEmailTemplate]);
router.get('/dashboard', auth.newUserAuthentication, [adminController.dashboard]);
router.post('/createemailgroup', auth.newUserAuthentication, [adminController.createEmailGroup]);
router.get('/emailgroup', auth.newUserAuthentication, [adminController.emailGroup]);
router.get('/groupemail/:emailgroupid', auth.newUserAuthentication, [adminController.groupEmail]);
router.post('/sendmailtogroup/:emailgroupid', auth.newUserAuthentication, [adminController.sendToMailGroup]);
router.post('/sendmailtomultiuser', auth.newUserAuthentication, [adminController.sendMailToMultiuser]);
router.get('/allemail', auth.newUserAuthentication, auth.newUserAuthentication, [adminController.allEmail]);
router.get('/agencyallemail', auth.newUserAuthentication, [adminController.agencyAllEmail]);
router.get('/employmentallemail', auth.newUserAuthentication, [adminController.employmentAllEmail]);
router.get('/emaillist/:usertype', auth.newUserAuthentication, [adminController.emailList]);
router.get('/email/:usertype1/:usertype2?', auth.newUserAuthentication, [adminController.demo]);
router.get('/registereduser/:usertype', auth.newUserAuthentication, [adminController.registeredUser]);
router.get('/agencydetail/:agencyid', auth.newUserAuthentication, [adminController.agencyDetail]);
router.post('/editagency/:agencyid', auth.newUserAuthentication, [adminController.editAgency]);
router.post('/deleteagent/:agencyid', auth.newUserAuthentication, [adminController.deleteAgent]);
router.get('/employeedetail/:employeeid', auth.newUserAuthentication, [adminController.employeeDetail]);
// router.post('/editemployee/:employeeid', [adminController.editEmployee]);
router.post('/deleteemployee/:employeeid', auth.newUserAuthentication, [adminController.deleteEmployee]);
router.post('/logout', auth.newUserAuthentication, [adminController.logout]);
router.post('/editemployee/:employeeid', auth.newUserAuthentication, [adminController.editEmployee]);

module.exports = router;